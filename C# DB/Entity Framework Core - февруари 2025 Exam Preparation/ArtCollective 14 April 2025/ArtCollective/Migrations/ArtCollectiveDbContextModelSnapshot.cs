// <auto-generated />
using System;
using ArtCollective.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ArtCollective.Migrations
{
    [DbContext(typeof(ArtCollectiveDbContext))]
    partial class ArtCollectiveDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ArtCollective.Data.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("ArtCollective.Data.Models.ArtistGroup", b =>
                {
                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("ArtistId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("ArtistsGroups");
                });

            modelBuilder.Entity("ArtCollective.Data.Models.Artwork", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Artworks");
                });

            modelBuilder.Entity("ArtCollective.Data.Models.Collaboration", b =>
                {
                    b.Property<int>("ArtistOneId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistTwoId")
                        .HasColumnType("int");

                    b.HasKey("ArtistOneId", "ArtistTwoId");

                    b.HasIndex("ArtistTwoId");

                    b.ToTable("Collaborations");
                });

            modelBuilder.Entity("ArtCollective.Data.Models.Feedback", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("GivenOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("GroupId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("ArtCollective.Data.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("StartedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ArtCollective.Data.Models.ArtistGroup", b =>
                {
                    b.HasOne("ArtCollective.Data.Models.Artist", "Artist")
                        .WithMany("ArtistsGroups")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtCollective.Data.Models.Group", "Group")
                        .WithMany("ArtistsGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ArtCollective.Data.Models.Artwork", b =>
                {
                    b.HasOne("ArtCollective.Data.Models.Artist", "Artist")
                        .WithMany("Artworks")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("ArtCollective.Data.Models.Collaboration", b =>
                {
                    b.HasOne("ArtCollective.Data.Models.Artist", "ArtistOne")
                        .WithMany("Collaboration1")
                        .HasForeignKey("ArtistOneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ArtCollective.Data.Models.Artist", "ArtistTwo")
                        .WithMany("Collaboration2")
                        .HasForeignKey("ArtistTwoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ArtistOne");

                    b.Navigation("ArtistTwo");
                });

            modelBuilder.Entity("ArtCollective.Data.Models.Feedback", b =>
                {
                    b.HasOne("ArtCollective.Data.Models.Artist", "Artist")
                        .WithMany("Feedbacks")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ArtCollective.Data.Models.Group", "Group")
                        .WithMany("Feedbacks")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ArtCollective.Data.Models.Artist", b =>
                {
                    b.Navigation("ArtistsGroups");

                    b.Navigation("Artworks");

                    b.Navigation("Collaboration1");

                    b.Navigation("Collaboration2");

                    b.Navigation("Feedbacks");
                });

            modelBuilder.Entity("ArtCollective.Data.Models.Group", b =>
                {
                    b.Navigation("ArtistsGroups");

                    b.Navigation("Feedbacks");
                });
#pragma warning restore 612, 618
        }
    }
}
