// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Relations_LAB.Data;

#nullable disable

namespace Relations_LAB.Migrations
{
    [DbContext(typeof(UniversityDbContext))]
    [Migration("20250327173223_StudentCoursesMapping")]
    partial class StudentCoursesMapping
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Relations_LAB.Data.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("AddressLine")
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PostCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId")
                        .IsUnique();

                    b.ToTable("Addresses", "uni");
                });

            modelBuilder.Entity("Relations_LAB.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("CourseEnd")
                        .HasColumnType("datetime2");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the current course");

                    b.Property<DateTime>("CourseStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Courses", "uni");

                    b.HasComment("Courses in university");
                });

            modelBuilder.Entity("Relations_LAB.Data.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rooms", "uni");
                });

            modelBuilder.Entity("Relations_LAB.Data.Models.Student", b =>
                {
                    b.Property<int>("StudentPk")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentPk"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("FacultyNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("Imeto na studenta");

                    b.Property<int?>("RoomId")
                        .HasColumnType("int");

                    b.Property<int>("Semester")
                        .HasColumnType("int");

                    b.HasKey("StudentPk");

                    b.HasIndex("RoomId");

                    b.ToTable("Students", "uni");

                    b.HasComment("University students");
                });

            modelBuilder.Entity("Relations_LAB.Data.Models.StudentsCourses", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentsCourses", "uni");
                });

            modelBuilder.Entity("Relations_LAB.Data.Models.Address", b =>
                {
                    b.HasOne("Relations_LAB.Data.Models.Student", "Student")
                        .WithOne("Address")
                        .HasForeignKey("Relations_LAB.Data.Models.Address", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Relations_LAB.Data.Models.Student", b =>
                {
                    b.HasOne("Relations_LAB.Data.Models.Room", "Room")
                        .WithMany("Students")
                        .HasForeignKey("RoomId");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Relations_LAB.Data.Models.StudentsCourses", b =>
                {
                    b.HasOne("Relations_LAB.Data.Models.Course", "Course")
                        .WithMany("StudentsCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Relations_LAB.Data.Models.Student", "Student")
                        .WithMany("StudentsCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Relations_LAB.Data.Models.Course", b =>
                {
                    b.Navigation("StudentsCourses");
                });

            modelBuilder.Entity("Relations_LAB.Data.Models.Room", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("Relations_LAB.Data.Models.Student", b =>
                {
                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("StudentsCourses");
                });
#pragma warning restore 612, 618
        }
    }
}
